/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.*/
/**
 * @file all.hpp
 * @author Fran√ßois Hamonic (francois.hamonic@gmail.com)
 * @brief 
 * @version 0.1
 * @date 2022-01-02
 * 
 * @copyright Copyright (c) 2021
 * 
 */
#ifndef FHAMONIC_MELON_HPP
#define FHAMONIC_MELON_HPP

#ifndef STATIC_DIGRAPH_HPP
#define STATIC_DIGRAPH_HPP

#include <algorithm>
#include <ranges>
#include <vector>

namespace fhamonic {
namespace melon {

class StaticDigraph {
public:
    using Node = std::size_t;
    using Arc = std::size_t;

    template <typename T>
    using NodeMap = std::vector<T>;
    template <typename T>
    using ArcMap = std::vector<T>;

public:
    std::vector<Arc> out_arc_begin;
    std::vector<Node> arc_target;

public:
    StaticDigraph(std::vector<Arc> && begins, std::vector<Node> && targets)
        : out_arc_begin(std::move(begins)), arc_target(std::move(targets)) {}

    StaticDigraph(const StaticDigraph & graph) = default;
    StaticDigraph(StaticDigraph && graph) = default;

    std::size_t nb_nodes() const { return out_arc_begin.size(); }
    std::size_t nb_arcs() const { return arc_target.size(); }

    auto nodes() const {
        return std::views::iota(static_cast<std::size_t>(0), nb_nodes());
    }
    auto arcs() const {
        return std::views::iota(static_cast<std::size_t>(0), nb_arcs());
    }
    auto out_arcs(const Node u) const {
        return std::views::iota(
            out_arc_begin[u],
            (u + 1 < nb_nodes() ? out_arc_begin[u + 1] : nb_arcs()));
    }
    Node target(Arc a) const { return arc_target[a]; }
    auto out_neighbors(const Node u) const {
        return std::ranges::subrange(
            arc_target.begin() + out_arc_begin[u],
            (u + 1 < nb_nodes() ? arc_target.begin() + out_arc_begin[u + 1]
                                : arc_target.end()));
    }

    auto out_arcs_pairs(const Node u) const {
        return std::views::transform(
            out_neighbors(u), [u](auto v) { return std::make_pair(u, v); });
    }
    auto arcs_pairs() const {
        return std::views::join(std::views::transform(
            nodes(), [&](auto u) { return out_arcs_pairs(u); }));
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // STATIC_DIGRAPH_HPP
#ifndef STATIC_DIGRAPH_BUILDER_HPP
#define STATIC_DIGRAPH_BUILDER_HPP

#include <algorithm>
#include <numeric>
#include <ranges>
#include <vector>

#include <range/v3/algorithm/sort.hpp>
#include <range/v3/view/zip.hpp>

namespace fhamonic {
namespace melon {

template <typename... ArcProperty>
class StaticDigraphBuilder {
public:
    using Node = std::size_t;
    using Arc = std::size_t;

    using PropertyMaps = std::tuple<std::vector<ArcProperty>...>;

private:
    std::size_t nb_nodes;
    std::vector<Arc> nb_out_arcs;
    std::vector<Node> arc_sources;
    std::vector<Node> arc_targets;

public:
    PropertyMaps arc_property_maps;

public:
    StaticDigraphBuilder() : nb_nodes(0) {}
    StaticDigraphBuilder(std::size_t nb_nodes)
        : nb_nodes(nb_nodes), nb_out_arcs(nb_nodes, 0) {}

    template <class Maps, class Properties, size_t... Is>
    void addProperties(Maps && maps, Properties && properties,
                       std::index_sequence<Is...>) {
        (get<Is>(maps).push_back(get<Is>(properties)), ...);
    }

    void addArc(Node u, Node v, ArcProperty... properties) {
        assert(nb_nodes > std::max(u, v));
        ++nb_out_arcs[u];
        arc_sources.push_back(u);
        arc_targets.push_back(v);
        addProperties(
            arc_property_maps, std::make_tuple(properties...),
            std::make_index_sequence<std::tuple_size<PropertyMaps>{}>{});
    }

    auto build() {
        // sort arc_sources, arc_tagrets and arc_property_maps
        auto arcs_zipped_view = std::apply(
            [&](auto &&... property_map) {
                return ranges::view::zip(arc_sources, arc_targets,
                                         property_map...);
            },
            arc_property_maps);
        ranges::sort(arcs_zipped_view, [](const auto & a, const auto & b) {
            if(std::get<0>(a) == std::get<0>(b))
                return std::get<1>(a) < std::get<1>(b);
            return std::get<0>(a) < std::get<0>(b);
        });
        // compute out_arc_begin
        std::exclusive_scan(nb_out_arcs.begin(), nb_out_arcs.end(),
                            nb_out_arcs.begin(), 0);
        // create graph
        StaticDigraph graph(std::move(nb_out_arcs), std::move(arc_targets));
        return std::apply(
            [&](auto &&... property_map) {
                return std::make_tuple(graph, property_map...);
            },
            arc_property_maps);
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // STATIC_DIGRAPH_BUILDER_HPP

#ifndef STATIC_GRAPH_HPP
#define STATIC_GRAPH_HPP

#include <algorithm>
#include <queue>
#include <ranges>
#include <vector>

namespace fhamonic {
namespace melon {

template <typename GR, typename LM>
class Dijkstra {
public:
    using Node = typename GR::Node;
    using Arc = typename GR::Arc;
    using Heap = std::priority_queue;

private:
    const GR & graph;
    const LM & length_map;

    Heap heap;

public:
    Dijkstra(const GR & g, const LM & l)
        : graph(g), length_map(l) {}

    // void init(Node s) {
    //     _heap->clear();
    //     for(NodeIt u(*G); u != INVALID; ++u)
    //         _heap_cross_ref->set(u, Heap::PRE_HEAP);
    //     if(_heap->state(s) != Heap::IN_HEAP)
    //         _heap->push(s, OperationTraits::zero());
    // }

    // bool emptyQueue() const { return _heap->empty(); }

    // std::pair<typename GR::Node, double> processNextNode() {        
    //     const auto p = _heap->p_top();
    //     _heap->pop();
    //     for(OutArcIt e(*G, p.first); e != INVALID; ++e) {
    //         Node w = G->target(e);
    //         const auto s = _heap->state(w);
    //         if(s == Heap::IN_HEAP) {
    //             Value newvalue = OperationTraits::plus(p.second, (*_length)[e]);
    //             if(OperationTraits::less(newvalue, (*_heap)[w]))
    //                 _heap->decrease(w, newvalue);
    //             continue;
    //         }
    //         if(s == Heap::POST_HEAP) continue;
    //         _heap->push(w, OperationTraits::plus(p.second, (*_length)[e]));
    //     }
    //     return p;
    // }
};

} // namespace melon
} // namespace fhamonic

#endif  // STATIC_GRAPH_HPP

#endif //FHAMONIC_MELON_HPP