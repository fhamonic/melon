/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.*/
/**
 * @file all.hpp
 * @author Fran√ßois Hamonic (francois.hamonic@gmail.com)
 * @brief
 * @version 0.1
 * @date 2022-01-02
 *
 * @copyright Copyright (c) 2021
 *
 */
#ifndef FHAMONIC_MELON_HPP
#define FHAMONIC_MELON_HPP

#ifndef MELON_STATIC_DIGRAPH_HPP
#define MELON_STATIC_DIGRAPH_HPP

#include <algorithm>
#include <cassert>
#include <ranges>
#include <vector>

#ifndef MELON_STATIC_MAP_HPP
#define MELON_STATIC_MAP_HPP

#include <algorithm>
#include <cassert>
#include <memory>
#include <ranges>
#include <vector>

namespace fhamonic {
namespace melon {

template <typename T>
class StaticMap {
public:
    using value_type = T;
    using reference = T &;
    using const_reference = const T &;
    using iterator = T *;
    using const_iterator = const T *;
    using size_type = std::size_t;

private:
    std::unique_ptr<value_type[]> _data;
    value_type * _data_end;

public:
    StaticMap() : _data(nullptr), _data_end(nullptr){};
    StaticMap(size_type size)
        : _data(std::make_unique_for_overwrite<value_type[]>(size))
        , _data_end(_data.get() + size){};

    StaticMap(size_type size, value_type init_value) : StaticMap(size) {
        std::ranges::fill(*this, init_value);
    }

    template <std::ranges::random_access_range R>
    explicit StaticMap(R && r) : StaticMap(std::ranges::size(r)) {
        std::ranges::copy(r, _data.get());
    }
    StaticMap(StaticMap &&) = default;

    StaticMap & operator=(const StaticMap & other) {
        resize(other.size());
        std::ranges::copy(other, _data);
    }
    StaticMap & operator=(StaticMap &&) = default;

    iterator begin() noexcept { return _data.get(); }
    iterator end() noexcept { return _data_end; }
    const_iterator begin() const noexcept { return _data.get(); }
    const_iterator end() const noexcept { return _data_end; }

    size_type size() const noexcept {
        return static_cast<size_type>(std::distance(begin(), end()));
    }
    void resize(size_type n) {
        if(n == size()) return;
        _data = std::make_unique_for_overwrite<value_type[]>(n);
        _data_end = _data.get() + n;
    }

    reference operator[](size_type i) noexcept {
        assert(i < size());
        return _data[i];
    }
    const_reference operator[](size_type i) const noexcept {
        assert(i < size());
        return _data[i];
    }
};

}  // namespace melon
}  // namespace fhamonic

#ifndef MELON_STATIC_MAP_BOOL_HPP
#define MELON_STATIC_MAP_BOOL_HPP

#include <algorithm>
#include <bit>
#include <cassert>
#include <memory>
#include <ranges>
#include <vector>

namespace fhamonic {
namespace melon {

template <>
class StaticMap<bool> {
public:
    using value_type = bool;
    using size_type = std::size_t;
    using difference_type = std::ptrdiff_t;

private:
    using span_type = std::size_t;
    static_assert(std::is_unsigned_v<span_type>);
    static constexpr size_type N = sizeof(span_type) << 3;
    static constexpr size_type span_index_mask = N - 1;
    static constexpr size_type nb_spans(std::size_t n) {
        return (n + N - 1) / N;
    }

public:
    // Branchless version
    // class reference {
    // private:
    //     span_type * _p;
    //     size_type _local_index;

    // public:
    //     reference(span_type * p, size_type index)
    //         : _p(p), _local_index(index) {}
    //     reference(const reference &) = default;

    //     operator bool() const noexcept { return (*_p >> _local_index) & 1; }
    //     reference & operator=(bool b) noexcept {
    //         *_p ^= (((*_p >> _local_index) & 1) ^ b) << _local_index;
    //         return *this;
    //     }
    //     reference & operator=(const reference & other) noexcept {
    //         return *this = bool(other);
    //     }
    //     bool operator==(const reference & x) const noexcept {
    //         return bool(*this) == bool(x);
    //     }
    //     bool operator<(const reference & x) const noexcept {
    //         return !bool(*this) && bool(x);
    //     }
    // };

    struct reference {
        span_type * _p;
        span_type _mask;

        reference(span_type * x, size_type y)
            : _p(x), _mask(span_type(1) << y) {}
        reference() noexcept : _p(0), _mask(0) {}
        reference(const reference &) = default;

        operator bool() const noexcept { return !!(*_p & _mask); }
        reference & operator=(bool x) noexcept {
            if(x)
                *_p |= _mask;
            else
                *_p &= ~_mask;
            return *this;
        }
        reference & operator=(const reference & x) noexcept {
            return *this = bool(x);
        }
        bool operator==(const reference & x) const {
            return bool(*this) == bool(x);
        }
        bool operator<(const reference & x) const {
            return !bool(*this) && bool(x);
        }
    };
    using const_reference = bool;

    class iterator_base {
    public:
        using iterator_category = std::random_access_iterator_tag;
        using difference_type = StaticMap<bool>::difference_type;
        using value_type = bool;
        using pointer = void;

    protected:
        span_type * _p;
        size_type _local_index;

    public:
        iterator_base(span_type * p, size_type index)
            : _p(p), _local_index(index) {}

        iterator_base() = default;
        iterator_base(const iterator_base &) = default;
        iterator_base(iterator_base &&) = default;

        iterator_base & operator=(const iterator_base &) = default;
        iterator_base & operator=(iterator_base &&) = default;

    protected:
        constexpr void _incr() noexcept {
            if(_local_index++ == N - 1) {
                ++_p;
                _local_index = 0;
            }
        }
        constexpr void _decr() noexcept {
            if(_local_index++ == 0) {
                --_p;
                _local_index = N - 1;
            }
        }
        constexpr void _incr(difference_type i) noexcept {
            difference_type n = static_cast<difference_type>(_local_index) + i;
            _p += n / difference_type(N);
            n = n % difference_type(N);
            if(n < 0) {
                n += difference_type(N);
                --_p;
            }
            _local_index = static_cast<size_type>(n);
        }

    public:
        friend bool operator==(const iterator_base & x,
                               const iterator_base & y) noexcept {
            return x._p == y._p && x._local_index == y._local_index;
        }
        friend constexpr std::strong_ordering operator<=>(
            const iterator_base & x, const iterator_base & y) noexcept {
            if(const auto cmp = x._p <=> y._p; cmp != 0) return cmp;
            return x._local_index <=> y._local_index;
        }
        difference_type operator-(const iterator_base & other) const noexcept {
            return (difference_type(N) * (_p - other._p) +
                    static_cast<difference_type>(_local_index) -
                    static_cast<difference_type>(other._local_index));
        }
    };

    class iterator : public iterator_base {
    public:
        using reference = StaticMap<bool>::reference;

        using iterator_base::iterator_base;

        iterator & operator++() noexcept {
            _incr();
            return *this;
        }
        iterator operator++(int) noexcept {
            iterator tmp = *this;
            _incr();
            return tmp;
        }
        iterator & operator--() noexcept {
            _decr();
            return *this;
        }
        iterator operator--(int) noexcept {
            iterator tmp = *this;
            _decr();
            return tmp;
        }
        iterator & operator+=(difference_type i) noexcept {
            _incr(i);
            return *this;
        }

        iterator & operator-=(difference_type i) noexcept {
            _incr(-i);
            return *this;
        }

        friend iterator operator+(const iterator & x, difference_type n) {
            iterator tmp = x;
            tmp += n;
            return tmp;
        }
        friend iterator operator+(difference_type n, const iterator & x) {
            return x + n;
        }
        friend iterator operator-(const iterator & x, difference_type n) {
            iterator tmp = x;
            tmp -= n;
            return tmp;
        }

        reference operator*() const noexcept {
            return reference(_p, _local_index);
        }
        reference operator[](difference_type i) const { return *(*this + i); }
    };

    class const_iterator : public iterator_base {
    public:
        using reference = const_reference;

        using iterator_base::iterator_base;

        const_iterator & operator++() noexcept {
            _incr();
            return *this;
        }
        const_iterator operator++(int) noexcept {
            const_iterator tmp = *this;
            _incr();
            return tmp;
        }
        const_iterator & operator--() noexcept {
            _decr();
            return *this;
        }
        const_iterator operator--(int) noexcept {
            const_iterator tmp = *this;
            _decr();
            return tmp;
        }
        const_iterator & operator+=(difference_type i) noexcept {
            _incr(i);
            return *this;
        }

        const_iterator & operator-=(difference_type i) noexcept {
            _incr(-i);
            return *this;
        }

        friend const_iterator operator+(const const_iterator & x,
                                        difference_type n) {
            const_iterator tmp = x;
            tmp += n;
            return tmp;
        }
        friend const_iterator operator+(difference_type n,
                                        const const_iterator & x) {
            return x + n;
        }
        friend const_iterator operator-(const const_iterator & x,
                                        difference_type n) {
            const_iterator tmp = x;
            tmp -= n;
            return tmp;
        }

        const_reference operator*() const noexcept {
            return (*_p >> _local_index) & 1;
        }
        const_reference operator[](difference_type i) const {
            return *(*this + i);
        }
    };

private:
    std::unique_ptr<span_type[]> _data;
    size_type _size;

public:
    StaticMap() : _data(nullptr), _size(0){};
    StaticMap(size_type size)
        : _data(std::make_unique_for_overwrite<span_type[]>(nb_spans(size))), _size(size){};

    StaticMap(size_type size, bool init_value) : StaticMap(size) {
        fill(init_value);
    };

    StaticMap(const StaticMap & other) : StaticMap(other._size) {
        std::copy(other._data.get(), other._data.get() + nb_spans(other._size),
                  _data.get());
    };
    StaticMap(StaticMap &&) = default;

    StaticMap & operator=(const StaticMap & other) {
        resize(other.size());
        std::copy(other._data.get(), other._data.get() + nb_spans(other._size),
                  _data.get());
        return *this;
    };
    StaticMap & operator=(StaticMap &&) = default;

    iterator begin() noexcept { return iterator(_data.get(), 0); }
    iterator end() noexcept {
        return iterator(_data.get() + _size / N, _size & span_index_mask);
    }
    const_iterator begin() const noexcept {
        return const_iterator(_data.get(), 0);
    }
    const_iterator end() const noexcept {
        return const_iterator(_data.get() + _size / N, _size & span_index_mask);
    }

    size_type size() const noexcept { return _size; }
    void resize(size_type n) {
        if(n == _size) return;
        _data = std::make_unique_for_overwrite<span_type[]>(nb_spans(n));
        _size = n;
    }

    reference operator[](size_type i) noexcept {
        assert(i < size());
        return reference(_data.get() + i / N, i & span_index_mask);
    }
    const_reference operator[](size_type i) const noexcept {
        assert(i < size());
        return reference(_data.get() + i / N, i & span_index_mask);
    }

    void fill(bool b) noexcept {
        std::fill(_data.get(), _data.get() + nb_spans(_size),
                  b ? ~span_type(0) : span_type(0));
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_STATIC_MAP_BOOL_HPP
#ifndef MELON_STATIC_MAP_ATOMIC_BOOL_HPP
#define MELON_STATIC_MAP_ATOMIC_BOOL_HPP

#include <algorithm>
#include <atomic>
#include <bit>
#include <cassert>
#include <memory>
#include <ranges>
#include <vector>

#include <range/v3/view/zip.hpp>

namespace fhamonic {
namespace melon {

template <>
class StaticMap<std::atomic<bool>> {
public:
    using value_type = bool;
    using size_type = std::size_t;
    using difference_type = std::ptrdiff_t;

private:
    using span_type = std::size_t;
    static_assert(std::is_unsigned_v<span_type>);
    static constexpr size_type N = sizeof(span_type) << 3;
    static constexpr size_type span_index_mask = N - 1;
    static constexpr size_type nb_spans(std::size_t n) {
        return (n + N - 1) / N;
    }

public:
    struct reference {
        std::atomic<span_type> * _p;
        span_type _mask;

        reference(std::atomic<span_type> * x, size_type y)
            : _p(x), _mask(span_type(1) << y) {}
        reference() noexcept : _p(0), _mask(0) {}
        reference(const reference &) = default;

        operator bool() const noexcept { return !!(_p->load() & _mask); }
        reference & operator=(bool x) noexcept {
            if(x)
                _p->fetch_or(_mask);
            else
                _p->fetch_and(~_mask);
            return *this;
        }
        reference & operator=(const reference & x) noexcept {
            return *this = bool(x);
        }
        bool operator==(const reference & x) const {
            return bool(*this) == bool(x);
        }
        bool operator<(const reference & x) const {
            return !bool(*this) && bool(x);
        }
    };
    using const_reference = bool;

    class iterator_base {
    public:
        using iterator_category = std::random_access_iterator_tag;
        using difference_type = StaticMap<std::atomic<bool>>::difference_type;
        using value_type = bool;
        using pointer = void;

    protected:
        std::atomic<span_type> * _p;
        size_type _local_index;

    public:
        iterator_base(std::atomic<span_type> * p, size_type index)
            : _p(p), _local_index(index) {}

        iterator_base() = default;
        iterator_base(const iterator_base &) = default;
        iterator_base(iterator_base &&) = default;

        iterator_base & operator=(const iterator_base &) = default;
        iterator_base & operator=(iterator_base &&) = default;

    protected:
        constexpr void _incr() noexcept {
            if(_local_index++ == N - 1) {
                ++_p;
                _local_index = 0;
            }
        }
        constexpr void _decr() noexcept {
            if(_local_index++ == 0) {
                --_p;
                _local_index = N - 1;
            }
        }
        constexpr void _incr(difference_type i) noexcept {
            difference_type n = static_cast<difference_type>(_local_index) + i;
            _p += n / difference_type(N);
            n = n % difference_type(N);
            if(n < 0) {
                n += difference_type(N);
                --_p;
            }
            _local_index = static_cast<size_type>(n);
        }

    public:
        friend bool operator==(const iterator_base & x,
                               const iterator_base & y) noexcept {
            return x._p == y._p && x._local_index == y._local_index;
        }
        friend constexpr std::strong_ordering operator<=>(
            const iterator_base & x, const iterator_base & y) noexcept {
            if(const auto cmp = x._p <=> y._p; cmp != 0) return cmp;
            return x._local_index <=> y._local_index;
        }
        difference_type operator-(const iterator_base & other) const noexcept {
            return (difference_type(N) * (_p - other._p) +
                    static_cast<difference_type>(_local_index) -
                    static_cast<difference_type>(other._local_index));
        }
    };

    class iterator : public iterator_base {
    public:
        using reference = StaticMap<std::atomic<bool>>::reference;

        using iterator_base::iterator_base;

        iterator & operator++() noexcept {
            _incr();
            return *this;
        }
        iterator operator++(int) noexcept {
            iterator tmp = *this;
            _incr();
            return tmp;
        }
        iterator & operator--() noexcept {
            _decr();
            return *this;
        }
        iterator operator--(int) noexcept {
            iterator tmp = *this;
            _decr();
            return tmp;
        }
        iterator & operator+=(difference_type i) noexcept {
            _incr(i);
            return *this;
        }

        iterator & operator-=(difference_type i) noexcept {
            _incr(-i);
            return *this;
        }

        friend iterator operator+(const iterator & x, difference_type n) {
            iterator tmp = x;
            tmp += n;
            return tmp;
        }
        friend iterator operator+(difference_type n, const iterator & x) {
            return x + n;
        }
        friend iterator operator-(const iterator & x, difference_type n) {
            iterator tmp = x;
            tmp -= n;
            return tmp;
        }

        reference operator*() const noexcept {
            return reference(_p, _local_index);
        }
        reference operator[](difference_type i) const { return *(*this + i); }
    };

    class const_iterator : public iterator_base {
    public:
        using reference = const_reference;

        using iterator_base::iterator_base;

        const_iterator & operator++() noexcept {
            _incr();
            return *this;
        }
        const_iterator operator++(int) noexcept {
            const_iterator tmp = *this;
            _incr();
            return tmp;
        }
        const_iterator & operator--() noexcept {
            _decr();
            return *this;
        }
        const_iterator operator--(int) noexcept {
            const_iterator tmp = *this;
            _decr();
            return tmp;
        }
        const_iterator & operator+=(difference_type i) noexcept {
            _incr(i);
            return *this;
        }

        const_iterator & operator-=(difference_type i) noexcept {
            _incr(-i);
            return *this;
        }

        friend const_iterator operator+(const const_iterator & x,
                                        difference_type n) {
            const_iterator tmp = x;
            tmp += n;
            return tmp;
        }
        friend const_iterator operator+(difference_type n,
                                        const const_iterator & x) {
            return x + n;
        }
        friend const_iterator operator-(const const_iterator & x,
                                        difference_type n) {
            const_iterator tmp = x;
            tmp -= n;
            return tmp;
        }

        const_reference operator*() const noexcept {
            return (_p->load() >> _local_index) & 1;
        }
        const_reference operator[](difference_type i) const {
            return *(*this + i);
        }
    };

private:
    std::unique_ptr<std::atomic<span_type>[]> _data;
    size_type _size;

public:
    StaticMap() : _data(nullptr), _size(0){};
    StaticMap(size_type size)
        : _data(std::make_unique<std::atomic<span_type>[]>(nb_spans(size)))
        , _size(size){};

    StaticMap(size_type size, bool init_value) : StaticMap(size) {
        fill(init_value);
    };

    StaticMap(const StaticMap & other) : StaticMap(other._size) {
        const size_type length = nb_spans(_size);
        for(size_type i = 0; i < length; ++i)
            _data[i].store(other._data[i].load());
    };
    StaticMap(StaticMap &&) = default;

    StaticMap & operator=(const StaticMap & other) {
        resize(other.size());
        const size_type length = nb_spans(_size);
        for(size_type i = 0; i < length; ++i)
            _data[i].store(other._data[i].load());
        return *this;
    };
    StaticMap & operator=(StaticMap &&) = default;

    iterator begin() noexcept { return iterator(_data.get(), 0); }
    iterator end() noexcept {
        return iterator(_data.get() + _size / N, _size & span_index_mask);
    }
    const_iterator begin() const noexcept {
        return const_iterator(_data.get(), 0);
    }
    const_iterator end() const noexcept {
        return const_iterator(_data.get() + _size / N, _size & span_index_mask);
    }

    size_type size() const noexcept { return _size; }
    void resize(size_type n) {
        if(n == _size) return;
        _data = std::make_unique<std::atomic<span_type>[]>(nb_spans(n));
        _size = n;
    }

    reference operator[](size_type i) noexcept {
        assert(i < size());
        return reference(_data.get() + i / N, i & span_index_mask);
    }
    const_reference operator[](size_type i) const noexcept {
        assert(i < size());
        return reference(_data.get() + i / N, i & span_index_mask);
    }

    void fill(bool b) noexcept {
        const span_type value = b ? ~span_type(0) : span_type(0);
        std::for_each(_data.get(), _data.get() + nb_spans(_size),
                      [value](auto & span) { span.store(value); });
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_STATIC_MAP_ATOMIC_BOOL_HPP

#endif  // MELON_STATIC_MAP_HPP

namespace fhamonic {
namespace melon {

class StaticDigraph {
public:
    using vertex = unsigned int;
    using arc = unsigned int;

    template <typename T>
    using vertexMap = StaticMap<T>;
    template <typename T>
    using arcMap = StaticMap<T>;

private:
    std::vector<arc> _out_arc_begin;
    std::vector<vertex> _arc_target;

public:
    StaticDigraph(std::vector<arc> && begins, std::vector<vertex> && targets)
        : _out_arc_begin(std::move(begins)), _arc_target(std::move(targets)) {}

    StaticDigraph() = default;
    StaticDigraph(const StaticDigraph & graph) = default;
    StaticDigraph(StaticDigraph && graph) = default;

    auto nb_vertices() const { return _out_arc_begin.size(); }
    auto nb_arcs() const { return _arc_target.size(); }

    bool is_valid_node(vertex u) const { return u < nb_vertices(); }
    bool is_valid_arc(arc u) const { return u < nb_arcs(); }

    auto vertices() const {
        return std::views::iota(static_cast<vertex>(0),
                                static_cast<vertex>(nb_vertices()));
    }
    auto arcs() const {
        return std::views::iota(static_cast<arc>(0),
                                static_cast<arc>(nb_arcs()));
    }
    auto out_arcs(const vertex u) const {
        assert(is_valid_node(u));
        return std::views::iota(
            _out_arc_begin[u],
            (u + 1 < nb_vertices() ? _out_arc_begin[u + 1] : nb_arcs()));
    }
    vertex source(arc a) const {  // O(\log |V|)
        assert(is_valid_arc(a));
        auto it =
            std::ranges::lower_bound(_out_arc_begin, a, std::less_equal<arc>());
        return static_cast<vertex>(std::distance(_out_arc_begin.begin(), --it));
    }
    vertex target(arc a) const {
        assert(is_valid_arc(a));
        return _arc_target[a];
    }
    auto out_neighbors(const vertex u) const {
        assert(is_valid_node(u));
        return std::ranges::subrange(
            _arc_target.begin() + _out_arc_begin[u],
            (u + 1 < nb_vertices() ? _arc_target.begin() + _out_arc_begin[u + 1]
                                : _arc_target.end()));
    }

    auto out_arcs_pairs(const vertex u) const {
        assert(is_valid_node(u));
        return std::views::transform(
            out_neighbors(u), [u](auto v) { return std::make_pair(u, v); });
    }
    auto arcs_pairs() const {
        return std::views::join(std::views::transform(
            vertices(), [this](auto u) { return out_arcs_pairs(u); }));
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_STATIC_DIGRAPH_HPP
#ifndef MELON_STATIC_DIGRAPH_BUILDER_HPP
#define MELON_STATIC_DIGRAPH_BUILDER_HPP

#include <algorithm>
#include <numeric>
#include <ranges>
#include <vector>

#include <range/v3/algorithm/sort.hpp>
#include <range/v3/view/zip.hpp>

namespace fhamonic {
namespace melon {

template <typename... arcProperty>
class StaticDigraphBuilder {
public:
    using vertex = StaticDigraph::vertex;
    using arc = StaticDigraph::arc;

    using PropertyMaps = std::tuple<std::vector<arcProperty>...>;

private:
    std::size_t _nb_vertices;
    std::vector<arc> _nb_out_arcs;
    std::vector<vertex> _arc_sources;
    std::vector<vertex> _arc_targets;
    PropertyMaps _arc_property_maps;

public:
    StaticDigraphBuilder() : _nb_vertices(0) {}
    StaticDigraphBuilder(std::size_t nb_vertices)
        : _nb_vertices(nb_vertices), _nb_out_arcs(nb_vertices, 0) {}

private:
    template <class Maps, class Properties, std::size_t... Is>
    void addProperties(Maps && maps, Properties && properties,
                       std::index_sequence<Is...>) {
        (get<Is>(maps).push_back(get<Is>(properties)), ...);
    }

public:
    void add_arc(vertex u, vertex v, arcProperty... properties) {
        assert(_nb_vertices > std::max(u, v));
        ++_nb_out_arcs[u];
        _arc_sources.push_back(u);
        _arc_targets.push_back(v);
        addProperties(
            _arc_property_maps, std::make_tuple(properties...),
            std::make_index_sequence<std::tuple_size<PropertyMaps>{}>{});
    }

    auto build() {
        // sort _arc_sources, arc_tagrets and _arc_property_maps
        auto arcs_zipped_view = std::apply(
            [this](auto &&... property_map) {
                return ranges::view::zip(_arc_sources, _arc_targets,
                                         property_map...);
            },
            _arc_property_maps);
        ranges::sort(arcs_zipped_view, [](const auto & a, const auto & b) {
            if(std::get<0>(a) == std::get<0>(b))
                return std::get<1>(a) < std::get<1>(b);
            return std::get<0>(a) < std::get<0>(b);
        });
        // compute out_arc_begin
        std::exclusive_scan(_nb_out_arcs.begin(), _nb_out_arcs.end(),
                            _nb_out_arcs.begin(), 0);
        // create graph
        StaticDigraph graph(std::move(_nb_out_arcs), std::move(_arc_targets));
        return std::apply(
            [this, &graph](auto &&... property_map) {
                return std::make_tuple(graph, property_map...);
            },
            _arc_property_maps);
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_STATIC_DIGRAPH_BUILDER_HPP

#ifndef MELON_BFS_HPP
#define MELON_BFS_HPP

#include <algorithm>
#include <ranges>
#include <type_traits>
#include <utility>
#include <variant>
#include <vector>

#ifndef MELON_TRAVERSAL_ALGORITHM_BEHAVIOR_HPP
#define MELON_TRAVERSAL_ALGORITHM_BEHAVIOR_HPP

namespace fhamonic {
namespace melon {

enum TraversalAlgorithmBehavior : unsigned char {
    TRACK_NONE = 0b00000000,
    TRACK_PRED_NODES = 0b00000001,
    TRACK_PRED_ARCS = 0b00000010,
    TRACK_DISTANCES = 0b00000100
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_TRAVERSAL_ALGORITHM_BEHAVIOR_HPP

#ifndef MELON_TRAVERSAL_ALGORITHM_ITERATOR_HPP
#define MELON_TRAVERSAL_ALGORITHM_ITERATOR_HPP

#include <concepts>
#include <iterator>

namespace fhamonic {
namespace melon {

template <typename Algo>
concept traversal_algorithm = requires(Algo alg) {
    { alg.empty_queue() } -> std::convertible_to<bool>;
    { alg.next_node() } -> std::default_initializable;
};

struct traversal_algorithm_end_iterator {};

template <typename Algo>
requires traversal_algorithm<Algo>
class traversal_algorithm_iterator {
public:
    using iterator_category = std::input_iterator_tag;
    using value_type = decltype(std::declval<Algo>().next_node());
    using reference = value_type const &;
    using pointer = value_type *;
    using difference_type = void;

    traversal_algorithm_iterator(Algo & alg) : algorithm(alg) {
        if(!algorithm.empty_queue()) ++(*this);
    }
    traversal_algorithm_iterator & operator++() noexcept {
        node = algorithm.next_node();
        return *this;
    }
    friend bool operator==(const traversal_algorithm_iterator & it,
                           traversal_algorithm_end_iterator) noexcept {
        return it.algorithm.empty_queue();
    }
    reference operator*() const noexcept { return node; }

private:
    Algo & algorithm;

public:
    value_type node;
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_TRAVERSAL_ALGORITHM_ITERATOR_HPP

namespace fhamonic {
namespace melon {

template <typename GR, std::underlying_type_t<TraversalAlgorithmBehavior> BH =
                           TraversalAlgorithmBehavior::TRACK_NONE>
class Bfs {
public:
    using vertex = GR::vertex;
    using arc = GR::arc;

    using ReachedMap = typename GR::vertexMap<bool>;

    static constexpr bool track_predecessor_vertices =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_PRED_NODES);
    static constexpr bool track_predecessor_arcs =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_PRED_ARCS);
    static constexpr bool track_distances =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_DISTANCES);

    using PredverticesMap =
        std::conditional<track_predecessor_vertices, typename GR::vertexMap<vertex>,
                         std::monostate>::type;
    using PredarcsMap =
        std::conditional<track_predecessor_arcs, typename GR::vertexMap<arc>,
                         std::monostate>::type;
    using DistancesMap =
        std::conditional<track_distances, typename GR::vertexMap<std::size_t>,
                         std::monostate>::type;

private:
    const GR & _graph;
    std::vector<vertex> _queue;
    std::vector<vertex>::iterator _queue_current;

    ReachedMap _reached_map;

    PredverticesMap _pred_vertices_map;
    PredarcsMap _pred_arcs_map;
    DistancesMap _dist_map;

public:
    Bfs(const GR & g) : _graph(g), _queue(), _reached_map(g.nb_vertices(), false) {
        _queue.reserve(g.nb_vertices());
        _queue_current = _queue.begin();
        if constexpr(track_predecessor_vertices)
            _pred_vertices_map.resize(g.nb_vertices());
        if constexpr(track_predecessor_arcs) _pred_arcs_map.resize(g.nb_vertices());
        if constexpr(track_distances) _dist_map.resize(g.nb_vertices());
    }

    Bfs & reset() noexcept {
        _queue.resize(0);
        _reached_map.fill(false);
        return *this;
    }
    Bfs & add_source(vertex s) noexcept {
        assert(!_reached_map[s]);
        push_node(s);
        if constexpr(track_predecessor_vertices) _pred_vertices_map[s] = s;
        if constexpr(track_distances) _dist_map[s] = 0;
        return *this;
    }

    bool empty_queue() const noexcept { return _queue_current == _queue.end(); }
    
private:
    void push_node(vertex u) noexcept {
        _queue.push_back(u);
        _reached_map[u] = true;
    }
    vertex pop_node() noexcept {
        const vertex u = *_queue_current;
        ++_queue_current;
        return u;
    }

public:
    vertex next_node() noexcept {
        const vertex u = pop_node();
        for(arc a : _graph.out_arcs(u)) {
            const vertex w = _graph.target(a);
            if(reached(w)) continue;
            push_node(w);
            if constexpr(track_predecessor_vertices) _pred_vertices_map[w] = u;
            if constexpr(track_predecessor_arcs) _pred_arcs_map[w] = a;
            if constexpr(track_distances) _dist_map[w] = _dist_map[u] + 1;
        }
        return u;
    }

    void run() noexcept {
        while(!empty_queue()) next_node();
    }
    auto begin() noexcept { return traversal_algorithm_iterator(*this); }
    auto end() noexcept { return traversal_algorithm_end_iterator(); }

    bool reached(const vertex u) const noexcept { return _reached_map[u]; }

    vertex pred_node(const vertex u) const noexcept
        requires(track_predecessor_vertices) {
        assert(reached(u));
        return _pred_vertices_map[u];
    }
    arc pred_arc(const vertex u) const noexcept requires(track_predecessor_arcs) {
        assert(reached(u));
        return _pred_arcs_map[u];
    }
    std::size_t dist(const vertex u) const noexcept requires(track_distances) {
        assert(reached(u));
        return _dist_map[u];
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_BFS_HPP

#ifndef MELON_DFS_HPP
#define MELON_DFS_HPP

#include <algorithm>
#include <ranges>
#include <stack>
#include <type_traits>
#include <utility>
#include <variant>
#include <vector>

namespace fhamonic {
namespace melon {

// TODO ranges , requires out_arcs : borrowed_range
template <typename GR, std::underlying_type_t<TraversalAlgorithmBehavior> BH =
                           TraversalAlgorithmBehavior::TRACK_NONE>
class Dfs {
public:
    using vertex = GR::vertex;
    using arc = GR::arc;

    using ReachedMap = typename GR::vertexMap<bool>;

    static constexpr bool track_predecessor_vertices =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_PRED_NODES);
    static constexpr bool track_predecessor_arcs =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_PRED_ARCS);

    using PredverticesMap =
        std::conditional<track_predecessor_vertices, typename GR::vertexMap<vertex>,
                         std::monostate>::type;
    using PredarcsMap =
        std::conditional<track_predecessor_arcs, typename GR::vertexMap<arc>,
                         std::monostate>::type;

private:
    const GR & _graph;

    using OutarcRange = decltype(std::declval<GR>().out_arcs(vertex()));
    using OutarcIt = decltype(std::declval<OutarcRange>().begin());
    using OutarcItEnd = decltype(std::declval<OutarcRange>().end());

    static_assert(std::ranges::borrowed_range<OutarcRange>);
    std::vector<std::pair<OutarcIt, OutarcItEnd>> _stack;

    ReachedMap _reached_map;

    PredverticesMap _pred_vertices_map;
    PredarcsMap _pred_arcs_map;

public:
    Dfs(const GR & g) : _graph(g), _stack(), _reached_map(g.nb_vertices(), false) {
        _stack.reserve(g.nb_vertices());
        if constexpr(track_predecessor_vertices)
            _pred_vertices_map.resize(g.nb_vertices());
        if constexpr(track_predecessor_arcs) _pred_arcs_map.resize(g.nb_vertices());
    }

    Dfs & reset() noexcept {
        _stack.resize(0);
        _reached_map.fill(false);
        return *this;
    }
    Dfs & add_source(vertex s) noexcept {
        assert(!_reached_map[s]);
        push_node(s);
        if constexpr(track_predecessor_vertices) _pred_vertices_map[s] = s;
        return *this;
    }

    bool empty_queue() const noexcept { return _stack.empty(); }
    void push_node(vertex u) noexcept {
        OutarcRange r = _graph.out_arcs(u);
        _stack.emplace_back(r.begin(), r.end());
        _reached_map[u] = true;
    }

private:
    void advance_iterators() {
        assert(!_stack.empty());
        do {
            while(_stack.back().first != _stack.back().second) {
                if(!reached(_graph.target(*_stack.back().first))) return;
                ++_stack.back().first;
            }
            _stack.pop_back();
        } while(!_stack.empty());
    }

public:
    std::pair<arc, vertex> next_node() noexcept {
        const arc a = *_stack.back().first;
        const vertex u = _graph.target(a);
        push_node(u);
        // if constexpr(track_predecessor_vertices) _pred_vertices_map[u] = u;
        if constexpr(track_predecessor_arcs) _pred_arcs_map[u] = a;
        advance_iterators();
        return std::make_pair(a, u);
    }

    void run() noexcept {
        while(!empty_queue()) next_node();
    }
    auto begin() noexcept { return traversal_algorithm_iterator(*this); }
    auto end() noexcept { return traversal_algorithm_end_iterator(); }

    bool reached(const vertex u) const noexcept { return _reached_map[u]; }
    vertex pred_node(const vertex u) const noexcept
        requires(track_predecessor_vertices) {
        assert(reached(u));
        return _pred_vertices_map[u];
    }
    arc pred_arc(const vertex u) const noexcept requires(track_predecessor_arcs) {
        assert(reached(u));
        return _pred_arcs_map[u];
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_DFS_HPP
#ifndef MELON_DIJKSTRA_HPP
#define MELON_DIJKSTRA_HPP

#include <algorithm>
#include <ranges>
#include <type_traits>
#include <utility>
#include <variant>
#include <vector>

#ifndef MELON_D_ARY_HEAP_HPP
#define MELON_D_ARY_HEAP_HPP

#include <algorithm>
#include <cassert>
#include <functional>
#include <utility>
#include <vector>

namespace fhamonic {
namespace melon {

template <int D, typename ND, typename PR, typename CMP = std::less<PR>>
class DAryHeap {
public:
    using vertex = ND;
    using Prio = PR;
    using Compare = CMP;
    using Pair = std::pair<vertex, Prio>;

private:
    using Index = std::vector<Pair>::size_type;

public:
    enum State : char { PRE_HEAP = 0, IN_HEAP = 1, POST_HEAP = 2 };

    std::vector<Pair> _heap_array;
    std::vector<Index> _indices_map;
    std::vector<State> _states_map;
    Compare _cmp;

public:
    DAryHeap(const std::size_t nb_vertices)
        : _heap_array()
        , _indices_map(nb_vertices)
        , _states_map(nb_vertices, State::PRE_HEAP)
        , _cmp() {}

    DAryHeap(const DAryHeap & bin) = default;
    DAryHeap(DAryHeap && bin) = default;

    Index size() const noexcept { return _heap_array.size(); }
    bool empty() const noexcept { return _heap_array.empty(); }
    void clear() noexcept {
        _heap_array.resize(0);
        std::ranges::fill(_states_map, State::PRE_HEAP);
    }

private:
    static constexpr Index parent_of(Index i) {
        return (i - sizeof(Pair)) / (sizeof(Pair) * D) * sizeof(Pair);
    }
    static constexpr Index first_child_of(Index i) {
        return i * D + sizeof(Pair);
    }
    template <int I = D>
    constexpr Index minimum_child(const Index first_child) const {
        if constexpr(I == 1)
            return first_child;
        else if constexpr(I == 2)
            return first_child +
                   sizeof(Pair) *
                       _cmp(pair_ref(first_child + sizeof(Pair)).second,
                           pair_ref(first_child).second);
        else {
            const Index first_half_minimum = minimum_child<I / 2>(first_child);
            const Index second_half_minimum =
                minimum_child<I - I / 2>(first_child + (I / 2) * sizeof(Pair));
            return _cmp(pair_ref(second_half_minimum).second,
                       pair_ref(first_half_minimum).second)
                       ? second_half_minimum
                       : first_half_minimum;
        }
    }
    constexpr Index minimum_remaining_child(const Index first_child,
                                            const Index nb_children) const {
        if constexpr(D == 2)
            return first_child;
        else if constexpr(D == 4) {
            switch(nb_children) {
                case 1:
                    return minimum_child<1>(first_child);
                case 2:
                    return minimum_child<2>(first_child);
                default:
                    return minimum_child<3>(first_child);
            }
        } else {
            switch(nb_children) {
                case 1:
                    return minimum_child<1>(first_child);
                case 2:
                    return minimum_child<2>(first_child);
                default:
                    const Index half = nb_children / 2;
                    const Index first_half_minimum =
                        minimum_remaining_child(first_child, half);
                    const Index second_half_minimum = minimum_remaining_child(
                        first_child + half * sizeof(Pair), nb_children - half);
                    return _cmp(pair_ref(second_half_minimum).second,
                               pair_ref(first_half_minimum).second)
                               ? second_half_minimum
                               : first_half_minimum;
            }
        }
    }

    constexpr Pair & pair_ref(Index i) {
        assert(0 <= (i / sizeof(Pair)) &&
               (i / sizeof(Pair)) < _heap_array.size());
        return *(reinterpret_cast<Pair *>(
            reinterpret_cast<std::byte *>(_heap_array.data()) + i));
    }
    constexpr const Pair & pair_ref(Index i) const {
        assert(0 <= (i / sizeof(Pair)) &&
               (i / sizeof(Pair)) < _heap_array.size());
        return *(reinterpret_cast<const Pair *>(
            reinterpret_cast<const std::byte *>(_heap_array.data()) + i));
    }
    void heap_move(Index i, Pair && p) noexcept {
        assert(0 <= (i / sizeof(Pair)) &&
               (i / sizeof(Pair)) < _heap_array.size());
        _indices_map[p.first] = i;
        pair_ref(i) = std::move(p);
    }

    void heap_push(Index holeIndex, Pair && p) noexcept {
        while(holeIndex > 0) {
            const Index parent = parent_of(holeIndex);
            if(!_cmp(p.second, pair_ref(parent).second)) break;
            heap_move(holeIndex, std::move(pair_ref(parent)));
            holeIndex = parent;
        }
        heap_move(holeIndex, std::move(p));
    }

    void adjust_heap(Index holeIndex, const Index end, Pair && p) noexcept {
        Index child_end;
        if constexpr(D > 2)
            child_end =
                end > D * sizeof(Pair) ? end - (D - 1) * sizeof(Pair) : 0;
        else
            child_end = end - (D - 1) * sizeof(Pair);
        Index child = first_child_of(holeIndex);
        while(child < child_end) {
            child = minimum_child(child);
            if(_cmp(pair_ref(child).second, p.second)) {
                heap_move(holeIndex, std::move(pair_ref(child)));
                holeIndex = child;
                child = first_child_of(child);
                continue;
            }
            goto ok;
        }
        if(child < end) {
            child =
                minimum_remaining_child(child, (end - child) / sizeof(Pair));
            if(_cmp(pair_ref(child).second, p.second)) {
                heap_move(holeIndex, std::move(pair_ref(child)));
                holeIndex = child;
            }
        }
    ok:
        heap_move(holeIndex, std::move(p));
    }

public:
    void push(Pair && p) noexcept {
        const Index n = _heap_array.size();
        _heap_array.emplace_back();
        _states_map[p.first] = IN_HEAP;
        heap_push(Index(n * sizeof(Pair)), std::move(p));
    }
    void push(const vertex i, const Prio p) noexcept { push(Pair(i, p)); }
    Prio prio(const vertex u) const noexcept {
        return pair_ref(_indices_map[u]).second;
    }
    Pair top() const noexcept {
        assert(!_heap_array.empty());
        return _heap_array.front();
    }
    Pair pop() noexcept {
        assert(!_heap_array.empty());
        const Pair p = std::move(_heap_array.front());
        _states_map[p.first] = POST_HEAP;
        const Index n = _heap_array.size() - 1;
        if(n > 0)
            adjust_heap(Index(0), n * sizeof(Pair),
                        std::move(_heap_array.back()));
        _heap_array.pop_back();
        return p;
    }
    void decrease(const vertex & u, const Prio & p) noexcept {
        heap_push(_indices_map[u], Pair(u, p));
    }
    State state(const vertex & u) const noexcept { return _states_map[u]; }
};  // class DAryHeap

template <typename ND, typename PR, typename CMP = std::less<PR>>
using BinaryHeap = DAryHeap<2, ND, PR, CMP>;

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_D_ARY_HEAP_HPP
#ifndef MELON_DIJKSTRA_SEMIRINGS_HPP
#define MELON_DIJKSTRA_SEMIRINGS_HPP

#include <functional>

namespace fhamonic {
namespace melon {

template <typename T>
struct DijkstraShortestPathSemiring {
    static constexpr T zero = static_cast<T>(0);
    static constexpr std::plus<T> plus{};
    static constexpr std::less<T> less{};
};

template <typename T>
struct DijkstraMostProbablePathSemiring {
    static constexpr T zero = static_cast<T>(1);
    static constexpr std::multiplies<T> plus{};
    static constexpr std::greater<T> less{};
};

template <typename T>
struct DijkstraMaxFlowPathSemiring {
    static constexpr T zero = std::numeric_limits<T>::max();
    static constexpr auto plus = [](const T & a, const T & b){ return std::min(a, b); };
    static constexpr std::greater<T> less{};
};

template <typename T>
struct DijkstraSpanningTreeSemiring {
    static constexpr T zero = static_cast<T>(0);
    static constexpr auto plus = [](const T & a, const T & b){ return b; };
    static constexpr std::less<T> less{};
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_DIJKSTRA_SEMIRINGS_HPP

#ifndef MELON_FAST_BINARY_HEAP_HPP
#define MELON_FAST_BINARY_HEAP_HPP

#include <algorithm>
#include <cassert>
#include <functional>
#include <utility>
#include <vector>

namespace fhamonic {
namespace melon {

template <typename ND, typename PR, typename CMP = std::less<PR>>
class FastBinaryHeap {
public:
    using vertex = ND;
    using Prio = PR;
    using Compare = CMP;
    using Pair = std::pair<vertex, Prio>;

private:
    using Index = std::vector<Pair>::size_type;

public:
    static_assert(sizeof(Pair) >= 2, "std::pair<vertex, Prio> is too small");
    enum State : Index {
        PRE_HEAP = static_cast<Index>(0),
        POST_HEAP = static_cast<Index>(1),
        IN_HEAP = static_cast<Index>(2)
    };

    std::vector<Pair> _heap_array;
    std::vector<Index> _indices_map;
    Compare _cmp;

public:
    FastBinaryHeap(const std::size_t nb_vertices)
        : _heap_array(1), _indices_map(nb_vertices, State::PRE_HEAP), _cmp() {}

    FastBinaryHeap(const FastBinaryHeap & bin) = default;
    FastBinaryHeap(FastBinaryHeap && bin) = default;

    Index size() const noexcept { return _heap_array.size() - 1; }
    bool empty() const noexcept { return size() == 0; }
    void clear() noexcept {
        _heap_array.resize(1);
        std::ranges::fill(_indices_map, State::PRE_HEAP);
    }

private:
    constexpr Pair & pair_ref(Index i) {
        return *(reinterpret_cast<Pair *>(
            reinterpret_cast<std::byte *>(_heap_array.data()) + i));
    }
    constexpr const Pair & pair_ref(Index i) const {
        return *(reinterpret_cast<const Pair *>(
            reinterpret_cast<const std::byte *>(_heap_array.data()) + i));
    }

    void heap_move(Index index, Pair && p) noexcept {
        _indices_map[p.first] = index;
        pair_ref(index) = std::move(p);
    }

    void heap_push(Index holeIndex, Pair && p) noexcept {
        while(holeIndex > sizeof(Pair)) {
            const Index parent = holeIndex / (2 * sizeof(Pair)) * sizeof(Pair);
            if(!_cmp(p.second, pair_ref(parent).second)) break;
            heap_move(holeIndex, std::move(pair_ref(parent)));
            holeIndex = parent;
        }
        heap_move(holeIndex, std::move(p));
    }

    void adjust_heap(Index holeIndex, const Index end, Pair && p) noexcept {
        Index child = 2 * holeIndex;
        while(child < end) {
            child += sizeof(Pair) * _cmp(pair_ref(child + sizeof(Pair)).second,
                                        pair_ref(child).second);
            if(_cmp(pair_ref(child).second, p.second)) {
                heap_move(holeIndex, std::move(pair_ref(child)));
                holeIndex = child;
                child = 2 * holeIndex;
                continue;
            }
            goto ok;
        }
        if(child == end && _cmp(pair_ref(child).second, p.second)) {
            heap_move(holeIndex, std::move(pair_ref(child)));
            holeIndex = child;
        }
    ok:
        heap_move(holeIndex, std::move(p));
    }

public:
    void push(Pair && p) noexcept {
        _heap_array.emplace_back();
        heap_push(static_cast<Index>(size() * sizeof(Pair)), std::move(p));
    }
    void push(const vertex i, const Prio p) noexcept { push(Pair(i, p)); }
    bool contains(const vertex u) const noexcept { return _indices_map[u] > 0; }
    Prio prio(const vertex u) const noexcept {
        return pair_ref(_indices_map[u]).second;
    }
    Pair top() const noexcept {
        assert(!empty());
        return _heap_array[1];
    }
    Pair pop() noexcept {
        assert(!empty());
        const Index n = _heap_array.size() - 1;
        const Pair p = std::move(_heap_array[1]);
        _indices_map[p.first] = POST_HEAP;
        if(n > 1)
            adjust_heap(static_cast<Index>(sizeof(Pair)), n * sizeof(Pair),
                        std::move(_heap_array.back()));
        _heap_array.pop_back();
        return p;
    }
    void decrease(const vertex & u, const Prio & p) noexcept {
        heap_push(_indices_map[u], Pair(u, p));
    }
    State state(const vertex & u) const noexcept {
        return State(std::min(_indices_map[u], static_cast<Index>(IN_HEAP)));
    }
};  // class FastBinaryHeap

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_FAST_BINARY_HEAP_HPP

namespace fhamonic {
namespace melon {

template <typename GR, typename LM,
          std::underlying_type_t<TraversalAlgorithmBehavior> BH =
              TraversalAlgorithmBehavior::TRACK_NONE,
          typename SR = DijkstraShortestPathSemiring<typename LM::value_type>,
          typename HP = FastBinaryHeap<
              typename GR::vertex, typename LM::value_type, decltype(SR::less)>>
class Dijkstra {
public:
    using vertex = GR::vertex;
    using arc = GR::arc;

    using Value = LM::value_type;
    using DijkstraSemiringTraits = SR;
    using Heap = HP;

    static constexpr bool track_predecessor_vertices =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_PRED_NODES);
    static constexpr bool track_predecessor_arcs =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_PRED_ARCS);
    static constexpr bool track_distances =
        static_cast<bool>(BH & TraversalAlgorithmBehavior::TRACK_DISTANCES);

    using PredverticesMap =
        std::conditional<track_predecessor_vertices, typename GR::vertexMap<vertex>,
                         std::monostate>::type;
    using PredarcsMap =
        std::conditional<track_predecessor_arcs, typename GR::vertexMap<arc>,
                         std::monostate>::type;
    using DistancesMap =
        std::conditional<track_distances, typename GR::vertexMap<Value>,
                         std::monostate>::type;

private:
    const GR & _graph;
    const LM & _length_map;

    Heap _heap;
    PredverticesMap _pred_vertices_map;
    PredarcsMap _pred_arcs_map;
    DistancesMap _dist_map;

public:
    Dijkstra(const GR & g, const LM & l)
        : _graph(g), _length_map(l), _heap(g.nb_vertices()) {
        if constexpr(track_predecessor_vertices)
            _pred_vertices_map.resize(g.nb_vertices());
        if constexpr(track_predecessor_arcs) _pred_arcs_map.resize(g.nb_vertices());
        if constexpr(track_distances) _dist_map.resize(g.nb_vertices());
    }

    Dijkstra & reset() noexcept {
        _heap.clear();
        return *this;
    }
    Dijkstra & add_source(vertex s,
                          Value dist = DijkstraSemiringTraits::zero) noexcept {
        assert(_heap.state(s) != Heap::IN_HEAP);
        _heap.push(s, dist);
        if constexpr(track_predecessor_vertices) _pred_vertices_map[s] = s;
        return *this;
    }

    bool empty_queue() const noexcept { return _heap.empty(); }

    std::pair<vertex, Value> next_node() noexcept {
        const auto p = _heap.pop();
        for(const arc a : _graph.out_arcs(p.first)) {
            const vertex w = _graph.target(a);
            const auto s = _heap.state(w);
            if(s == Heap::IN_HEAP) {
                const Value new_dist =
                    DijkstraSemiringTraits::plus(p.second, _length_map[a]);
                if(DijkstraSemiringTraits::less(new_dist, _heap.prio(w))) {
                    _heap.decrease(w, new_dist);
                    if constexpr(track_predecessor_vertices)
                        _pred_vertices_map[w] = p.first;
                    if constexpr(track_predecessor_arcs) _pred_arcs_map[w] = a;
                }
            } else if(s == Heap::PRE_HEAP) {
                _heap.push(
                    w, DijkstraSemiringTraits::plus(p.second, _length_map[a]));
                if constexpr(track_predecessor_vertices)
                    _pred_vertices_map[w] = p.first;
                if constexpr(track_predecessor_arcs) _pred_arcs_map[w] = a;
            }
        }
        if constexpr(track_distances) _dist_map[p.first] = p.second;
        return p;
    }

    void run() noexcept {
        while(!empty_queue()) next_node();
    }
    auto begin() noexcept { return traversal_algorithm_iterator(*this); }
    auto end() noexcept { return traversal_algorithm_end_iterator(); }

    vertex pred_node(const vertex u) const noexcept
        requires(track_predecessor_vertices) {
        assert(_heap.state(u) != Heap::PRE_HEAP);
        return _pred_vertices_map[u];
    }
    arc pred_arc(const vertex u) const noexcept requires(track_predecessor_arcs) {
        assert(_heap.state(u) != Heap::PRE_HEAP);
        return _pred_arcs_map[u];
    }
    Value dist(const vertex u) const noexcept requires(track_distances) {
        assert(_heap.state(u) == Heap::POST_HEAP);
        return _dist_map[u];
    }
};

}  // namespace melon
}  // namespace fhamonic

#endif  // MELON_DIJKSTRA_HPP

#endif  // FHAMONIC_MELON_HPP